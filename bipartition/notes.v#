

(* Teil des Zeugen, bzw. Teil des Interfacemodels vom CDA *)
Variable parent : Vertex -> Vertex.
Variable distance : Vertex -> nat.
Variable color : Vertex -> bool.
Variable root: Vertex.
(* Variable v1 : Vertex. *)
(*  *)



Definition root_prop(c: Connected v a) := v root.

Definition parent_prop (x :Vertex) :=
x <> root /\ v (parent x) /\ a (A_ends x (parent x)) /\ a (A_ends (parent x) x)
\/
x=root /\ parent x = x.

Definition distance_prop (x: Vertex) :=
forall (x:Vertex), (* redundant *)
x <> root /\ distance x = distance (parent x) + 1
\/
(x=root) /\ distance x = 0.

(* Gamma 1 *)
Definition spanning_tree (c: Connected v a) :=
root_prop c /\ (forall x, v x -> distance_prop x /\ parent_prop x).
(* Distributable-Theorem von Samira klauen *)



(* oddclosedwalk *)
Definition odd_closed {v : V_set} {a : A_set} (x y : Component) (vl : V_list) (el : E_list) (w : Walk v a x y vl el)
 := Closed_walk v a x y vl el w /\ odd (length el).


Definition bipartite3 (a: A_set) := forall (ar : Arc), a ar -> color (A_tail ar) <> color (A_head ar).

(* special_neighbours, special_nbr_pair, witnessing_pair, existential_pair *)
(* gamma 2 *)
Definition gamma_2 (v:V_set) (a:A_set)(c: Connected v a) (t : spanning_tree v a root parent distance c) (v1 : Vertex) :=
 {v2 : Vertex & (v v1 /\ v v2 /\ a (A_ends v1 v2) /\ odd (distance v1) = odd (distance v2))}.

Definition special_vertices (v:V_set) (a:A_set)(c: Connected v a) (t : spanning_tree v a root parent distance c) (x y : Component) :=
  v x /\ v y /\ a (A_ends x y) /\ odd (distance x) = odd (distance y) /\ x <> y.

(* Lemma special_vertices_no_parents: special_vertices x y -> ~ parent (x) = y /\ ~ parent (y) = x. *)



(* Theorem for Gamma 2 being existentially distribubility,  (Annahmen Gamma1 und gamma2) *)
Theorem special_vertices_make_odd_closed: 
  forall (v:V_set) (a:A_set) (c : Connected v a) (t : spanning_tree v a root parent distance c)(x y: Component),

  special_vertices v a c t x y ->

{vlx : V_list & {vly : V_list & {elx: E_list & {ely: E_list & {w: Walk v a y y (x :: (vlx ++ vly)) ((E_ends y x) :: (elx ++ ely)) & 
odd_closed y y (x :: (vlx ++ vly)) ((E_ends y x) :: (elx ++ ely)) w}}}}}.


(* Theorem of witness property, PO I *)
Theorem aus_Gamma_folgt_Psi.
{vlx : V_list & {vly : V_list & {elx: E_list & {ely: E_list & {w: Walk v a y y (x :: (vlx ++ vly)) ((E_ends y x) :: (elx ++ ely)) & 
odd_closed y y (x :: (vlx ++ vly)) ((E_ends y x) :: (elx ++ ely)) w}}}}} -> ~ bipartite3 a.






(* *)
Theorem special_vertices_make_connected_not_bi: forall (v:V_set) (a:A_set)(e: Connected v a) (t : spanning_tree v a root parent distance e) (x y : Component),
  special_vertices v a e t x y -> ~ bipartite3 a.